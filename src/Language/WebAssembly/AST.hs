module Language.WebAssembly.AST (
    Var
  , Expr
  , Expr' (..)
  , Func
  , Func' (..)
  , Module
  , Module' (..)
) where

import Data.Int
import Data.Vector
import Language.WebAssembly.Annotated
import Language.WebAssembly.Kernel (Var, Memory, Import, Export)
import Language.WebAssembly.Memory
import Language.WebAssembly.Types

type Expr a = Annotated (Expr' a) a
type Func a = Annotated (Func' a) a
type Module a = Annotated (Module' a) a

data Expr' a
    = I32_const !(Annotated Int32 a)
    | I64_const !(Annotated Int64 a)
    | F32_const !(Annotated Float a)
    | F64_const !(Annotated Double a)

    | Nop
    | Unreachable
    | Block !(Vector (Expr a))
    | Loop !(Vector (Expr a))
    | Br !(Var a) !(Maybe (Expr a))
    | Br_if !(Var a) !(Maybe (Expr a)) !(Expr a)
    | Br_table !(Vector (Var a)) !(Var a) !(Maybe (Expr a)) !(Expr a)
    | Return !(Maybe (Expr a))
    | If !(Expr a) !(Vector (Expr a)) !(Vector (Expr a))
    | Select !(Expr a) !(Expr a) !(Expr a)
    | Call !(Var a) !(Vector (Expr a))
    | Call_import !(Var a) !(Vector (Expr a))
    | Call_indirect !(Var a) !(Expr a) !(Vector (Expr a))

    | Get_local !(Var a)
    | Set_local !(Var a) !(Expr a)

    | I32_load !Offset !Int !(Expr a)
    | I64_load !Offset !Int !(Expr a)
    | F32_load !Offset !Int !(Expr a)
    | F64_load !Offset !Int !(Expr a)
    | I32_store !Offset !Int !(Expr a) !(Expr a)
    | I64_store !Offset !Int !(Expr a) !(Expr a)
    | F32_store !Offset !Int !(Expr a) !(Expr a)
    | F64_store !Offset !Int !(Expr a) !(Expr a)
    | I32_load8_s !Offset !Int !(Expr a)
    | I32_load8_u !Offset !Int !(Expr a)
    | I32_load16_s !Offset !Int !(Expr a)
    | I32_load16_u !Offset !Int !(Expr a)
    | I64_load8_s !Offset !Int !(Expr a)
    | I64_load8_u !Offset !Int !(Expr a)
    | I64_load16_s !Offset !Int !(Expr a)
    | I64_load16_u !Offset !Int !(Expr a)
    | I64_load32_s !Offset !Int !(Expr a)
    | I64_load32_u !Offset !Int !(Expr a)
    | I32_store8 !Offset !Int !(Expr a) !(Expr a)
    | I32_store16 !Offset !Int !(Expr a) !(Expr a)
    | I64_store8 !Offset !Int !(Expr a) !(Expr a)
    | I64_store16 !Offset !Int !(Expr a) !(Expr a)
    | I64_store32 !Offset !Int !(Expr a) !(Expr a)

    | I32_clz !(Expr a)
    | I32_ctz !(Expr a)
    | I32_popcnt !(Expr a)
    | I64_clz !(Expr a)
    | I64_ctz !(Expr a)
    | I64_popcnt !(Expr a)
    | F32_neg !(Expr a)
    | F32_abs !(Expr a)
    | F32_sqrt !(Expr a)
    | F32_ceil !(Expr a)
    | F32_floor !(Expr a)
    | F32_trunc !(Expr a)
    | F32_nearest !(Expr a)
    | F64_neg !(Expr a)
    | F64_abs !(Expr a)
    | F64_sqrt !(Expr a)
    | F64_ceil !(Expr a)
    | F64_floor !(Expr a)
    | F64_trunc !(Expr a)
    | F64_nearest !(Expr a)

    | I32_add !(Expr a) !(Expr a)
    | I32_sub !(Expr a) !(Expr a)
    | I32_mul !(Expr a) !(Expr a)
    | I32_div_s !(Expr a) !(Expr a)
    | I32_div_u !(Expr a) !(Expr a)
    | I32_rem_s !(Expr a) !(Expr a)
    | I32_rem_u !(Expr a) !(Expr a)
    | I32_and !(Expr a) !(Expr a)
    | I32_or !(Expr a) !(Expr a)
    | I32_xor !(Expr a) !(Expr a)
    | I32_shl !(Expr a) !(Expr a)
    | I32_shr_s !(Expr a) !(Expr a)
    | I32_shr_u !(Expr a) !(Expr a)
    | I32_rotl !(Expr a) !(Expr a)
    | I32_rotr !(Expr a) !(Expr a)
    | I64_add !(Expr a) !(Expr a)
    | I64_sub !(Expr a) !(Expr a)
    | I64_mul !(Expr a) !(Expr a)
    | I64_div_s !(Expr a) !(Expr a)
    | I64_div_u !(Expr a) !(Expr a)
    | I64_rem_s !(Expr a) !(Expr a)
    | I64_rem_u !(Expr a) !(Expr a)
    | I64_and !(Expr a) !(Expr a)
    | I64_or !(Expr a) !(Expr a)
    | I64_xor !(Expr a) !(Expr a)
    | I64_shl !(Expr a) !(Expr a)
    | I64_shr_s !(Expr a) !(Expr a)
    | I64_shr_u !(Expr a) !(Expr a)
    | I64_rotl !(Expr a) !(Expr a)
    | I64_rotr !(Expr a) !(Expr a)
    | F32_add !(Expr a) !(Expr a)
    | F32_sub !(Expr a) !(Expr a)
    | F32_mul !(Expr a) !(Expr a)
    | F32_div !(Expr a) !(Expr a)
    | F32_min !(Expr a) !(Expr a)
    | F32_max !(Expr a) !(Expr a)
    | F32_copysign !(Expr a) !(Expr a)
    | F64_add !(Expr a) !(Expr a)
    | F64_sub !(Expr a) !(Expr a)
    | F64_mul !(Expr a) !(Expr a)
    | F64_div !(Expr a) !(Expr a)
    | F64_min !(Expr a) !(Expr a)
    | F64_max !(Expr a) !(Expr a)
    | F64_copysign !(Expr a) !(Expr a)

    | I32_eqz !(Expr a)
    | I64_eqz !(Expr a)

        | I32_eq !(Expr a) !(Expr a)
    | I32_ne !(Expr a) !(Expr a)
    | I32_lt_s !(Expr a) !(Expr a)
    | I32_lt_u !(Expr a) !(Expr a)
    | I32_le_s !(Expr a) !(Expr a)
    | I32_le_u !(Expr a) !(Expr a)
    | I32_gt_s !(Expr a) !(Expr a)
    | I32_gt_u !(Expr a) !(Expr a)
    | I32_ge_s !(Expr a) !(Expr a)
    | I32_ge_u !(Expr a) !(Expr a)
    | I64_eq !(Expr a) !(Expr a)
    | I64_ne !(Expr a) !(Expr a)
    | I64_lt_s !(Expr a) !(Expr a)
    | I64_lt_u !(Expr a) !(Expr a)
    | I64_le_s !(Expr a) !(Expr a)
    | I64_le_u !(Expr a) !(Expr a)
    | I64_gt_s !(Expr a) !(Expr a)
    | I64_gt_u !(Expr a) !(Expr a)
    | I64_ge_s !(Expr a) !(Expr a)
    | I64_ge_u !(Expr a) !(Expr a)
    | F32_eq !(Expr a) !(Expr a)
    | F32_ne !(Expr a) !(Expr a)
    | F32_lt !(Expr a) !(Expr a)
    | F32_le !(Expr a) !(Expr a)
    | F32_gt !(Expr a) !(Expr a)
    | F32_ge !(Expr a) !(Expr a)
    | F64_eq !(Expr a) !(Expr a)
    | F64_ne !(Expr a) !(Expr a)
    | F64_lt !(Expr a) !(Expr a)
    | F64_le !(Expr a) !(Expr a)
    | F64_gt !(Expr a) !(Expr a)
    | F64_ge !(Expr a) !(Expr a)

    | I32_wrap_i64 !(Expr a)
    | I32_trunc_s_f32 !(Expr a)
    | I32_trunc_u_f32 !(Expr a)
    | I32_trunc_s_f64 !(Expr a)
    | I32_trunc_u_f64 !(Expr a)
    | I64_extend_s_i32 !(Expr a)
    | I64_extend_u_i32 !(Expr a)
    | I64_trunc_s_f32 !(Expr a)
    | I64_trunc_u_f32 !(Expr a)
    | I64_trunc_s_f64 !(Expr a)
    | I64_trunc_u_f64 !(Expr a)
    | F32_convert_s_i32 !(Expr a)
    | F32_convert_u_i32 !(Expr a)
    | F32_convert_s_i64 !(Expr a)
    | F32_convert_u_i64 !(Expr a)
    | F32_demote_f64 !(Expr a)
    | F64_convert_s_i32 !(Expr a)
    | F64_convert_u_i32 !(Expr a)
    | F64_convert_s_i64 !(Expr a)
    | F64_convert_u_i64 !(Expr a)
    | F64_promote_f32 !(Expr a)
    | I32_reinterpret_f32 !(Expr a)
    | I64_reinterpret_f64 !(Expr a)
    | F32_reinterpret_i32 !(Expr a)
    | F64_reinterpret_i64 !(Expr a)

    | Current_memory
    | Grow_memory !(Expr a)

data Func' a = Func' {
    ftype :: !(Var a)
  , locals :: !(Vector ValueType)
  , body :: !(Vector (Expr a))
}

data Module' a = Module' {
    memory :: !(Maybe (Memory a))
  , types :: !(Vector FuncType)
  , funcs :: !(Vector (Func a))
  , start :: !(Maybe (Var a))
  , imports :: !(Vector (Import a))
  , exports :: !(Vector (Export a))
  , table :: !(Vector (Var a))
}
